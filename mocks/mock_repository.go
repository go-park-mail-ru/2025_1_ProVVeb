// Code generated by MockGen. DO NOT EDIT.
// Source: repository/userrepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/go-park-mail-ru/2025_1_ProVVeb/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CloseRepo mocks base method.
func (m *MockUserRepository) CloseRepo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRepo")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRepo indicates an expected call of CloseRepo.
func (mr *MockUserRepositoryMockRecorder) CloseRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRepo", reflect.TypeOf((*MockUserRepository)(nil).CloseRepo))
}

// DeletePhoto mocks base method.
func (m *MockUserRepository) DeletePhoto(userId int, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoto", userId, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhoto indicates an expected call of DeletePhoto.
func (mr *MockUserRepositoryMockRecorder) DeletePhoto(userId, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoto", reflect.TypeOf((*MockUserRepository)(nil).DeletePhoto), userId, url)
}

// DeleteSession mocks base method.
func (m *MockUserRepository) DeleteSession(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockUserRepositoryMockRecorder) DeleteSession(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockUserRepository)(nil).DeleteSession), userId)
}

// DeleteUserById mocks base method.
func (m *MockUserRepository) DeleteUserById(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserRepositoryMockRecorder) DeleteUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserById), userId)
}

// GetMatches mocks base method.
func (m *MockUserRepository) GetMatches(forUserId int) ([]model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatches", forUserId)
	ret0, _ := ret[0].([]model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatches indicates an expected call of GetMatches.
func (mr *MockUserRepositoryMockRecorder) GetMatches(forUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatches", reflect.TypeOf((*MockUserRepository)(nil).GetMatches), forUserId)
}

// GetPhotos mocks base method.
func (m *MockUserRepository) GetPhotos(userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotos", userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotos indicates an expected call of GetPhotos.
func (mr *MockUserRepositoryMockRecorder) GetPhotos(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotos", reflect.TypeOf((*MockUserRepository)(nil).GetPhotos), userId)
}

// GetProfileById mocks base method.
func (m *MockUserRepository) GetProfileById(userId int) (model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileById", userId)
	ret0, _ := ret[0].(model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileById indicates an expected call of GetProfileById.
func (mr *MockUserRepositoryMockRecorder) GetProfileById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileById", reflect.TypeOf((*MockUserRepository)(nil).GetProfileById), userId)
}

// GetProfilesByUserId mocks base method.
func (m *MockUserRepository) GetProfilesByUserId(forUserId int) ([]model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilesByUserId", forUserId)
	ret0, _ := ret[0].([]model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilesByUserId indicates an expected call of GetProfilesByUserId.
func (mr *MockUserRepositoryMockRecorder) GetProfilesByUserId(forUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilesByUserId", reflect.TypeOf((*MockUserRepository)(nil).GetProfilesByUserId), forUserId)
}

// GetUserByLogin mocks base method.
func (m *MockUserRepository) GetUserByLogin(ctx context.Context, login string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserRepositoryMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetUserByLogin), ctx, login)
}

// GetUserParams mocks base method.
func (m *MockUserRepository) GetUserParams(userID int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserParams", userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserParams indicates an expected call of GetUserParams.
func (mr *MockUserRepositoryMockRecorder) GetUserParams(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserParams", reflect.TypeOf((*MockUserRepository)(nil).GetUserParams), userID)
}

// SetLike mocks base method.
func (m *MockUserRepository) SetLike(from, to, status int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLike", from, to, status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLike indicates an expected call of SetLike.
func (mr *MockUserRepositoryMockRecorder) SetLike(from, to, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLike", reflect.TypeOf((*MockUserRepository)(nil).SetLike), from, to, status)
}

// StoreInterests mocks base method.
func (m *MockUserRepository) StoreInterests(profileId int, interests []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInterests", profileId, interests)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInterests indicates an expected call of StoreInterests.
func (mr *MockUserRepositoryMockRecorder) StoreInterests(profileId, interests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInterests", reflect.TypeOf((*MockUserRepository)(nil).StoreInterests), profileId, interests)
}

// StorePhoto mocks base method.
func (m *MockUserRepository) StorePhoto(userId int, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePhoto", userId, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePhoto indicates an expected call of StorePhoto.
func (mr *MockUserRepositoryMockRecorder) StorePhoto(userId, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePhoto", reflect.TypeOf((*MockUserRepository)(nil).StorePhoto), userId, url)
}

// StorePhotos mocks base method.
func (m *MockUserRepository) StorePhotos(profileId int, paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePhotos", profileId, paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePhotos indicates an expected call of StorePhotos.
func (mr *MockUserRepositoryMockRecorder) StorePhotos(profileId, paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePhotos", reflect.TypeOf((*MockUserRepository)(nil).StorePhotos), profileId, paths)
}

// StoreProfile mocks base method.
func (m *MockUserRepository) StoreProfile(arg0 model.Profile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProfile", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreProfile indicates an expected call of StoreProfile.
func (mr *MockUserRepositoryMockRecorder) StoreProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProfile", reflect.TypeOf((*MockUserRepository)(nil).StoreProfile), arg0)
}

// StoreSession mocks base method.
func (m *MockUserRepository) StoreSession(userId int, sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSession", userId, sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSession indicates an expected call of StoreSession.
func (mr *MockUserRepositoryMockRecorder) StoreSession(userId, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSession", reflect.TypeOf((*MockUserRepository)(nil).StoreSession), userId, sessionId)
}

// StoreUser mocks base method.
func (m *MockUserRepository) StoreUser(arg0 model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockUserRepositoryMockRecorder) StoreUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockUserRepository)(nil).StoreUser), arg0)
}

// UpdateProfile mocks base method.
func (m *MockUserRepository) UpdateProfile(arg0 int, arg1 model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserRepositoryMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserRepository)(nil).UpdateProfile), arg0, arg1)
}

// UserExists mocks base method.
func (m *MockUserRepository) UserExists(ctx context.Context, login string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, login)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUserRepositoryMockRecorder) UserExists(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUserRepository)(nil).UserExists), ctx, login)
}
