// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sessionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	GetActive(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*ActiveQueryList, error)
	SendResp(ctx context.Context, in *SendRespRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetForUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*QueryResponseList, error)
	GetForQuery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ForQueryResponseList, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetActive(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*ActiveQueryList, error) {
	out := new(ActiveQueryList)
	err := c.cc.Invoke(ctx, "/session.QueryService/GetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) SendResp(ctx context.Context, in *SendRespRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/session.QueryService/SendResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*QueryResponseList, error) {
	out := new(QueryResponseList)
	err := c.cc.Invoke(ctx, "/session.QueryService/GetForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForQuery(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ForQueryResponseList, error) {
	out := new(ForQueryResponseList)
	err := c.cc.Invoke(ctx, "/session.QueryService/GetForQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	GetActive(context.Context, *GetUserRequest) (*ActiveQueryList, error)
	SendResp(context.Context, *SendRespRequest) (*emptypb.Empty, error)
	GetForUser(context.Context, *GetUserRequest) (*QueryResponseList, error)
	GetForQuery(context.Context, *emptypb.Empty) (*ForQueryResponseList, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) GetActive(context.Context, *GetUserRequest) (*ActiveQueryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActive not implemented")
}
func (UnimplementedQueryServiceServer) SendResp(context.Context, *SendRespRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResp not implemented")
}
func (UnimplementedQueryServiceServer) GetForUser(context.Context, *GetUserRequest) (*QueryResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForUser not implemented")
}
func (UnimplementedQueryServiceServer) GetForQuery(context.Context, *emptypb.Empty) (*ForQueryResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForQuery not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_GetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.QueryService/GetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActive(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_SendResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRespRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).SendResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.QueryService/SendResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).SendResp(ctx, req.(*SendRespRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.QueryService/GetForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.QueryService/GetForQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForQuery(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActive",
			Handler:    _QueryService_GetActive_Handler,
		},
		{
			MethodName: "SendResp",
			Handler:    _QueryService_SendResp_Handler,
		},
		{
			MethodName: "GetForUser",
			Handler:    _QueryService_GetForUser_Handler,
		},
		{
			MethodName: "GetForQuery",
			Handler:    _QueryService_GetForQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}
